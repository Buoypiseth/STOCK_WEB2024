@model IEnumerable<WebApplication.Models.Category>
@section Styles {
    <link href="~/assets/plugins/select2/css/select2.min.css" rel="stylesheet">
    <link href="~/assets/plugins/select2-bootstrap4-theme/select2-bootstrap4.min.css" rel="stylesheet">
    <link href="~/assets/plugins/datatables-bs4/css/dataTables.bootstrap4.css" rel="stylesheet" />
    <link href="~/assets/plugins/datatables-responsive/css/responsive.bootstrap4.css" rel="stylesheet">
    <link href="~/assets/plugins/sweetalert2/sweetalert2.min.css" rel="stylesheet" />
    <link href="~/assets/plugins/toastr/toastr.min.css" rel="stylesheet" />
    <link href="~/assets/plugins/icheck-bootstrap/icheck-bootstrap.min.css" rel="stylesheet">
    <style>
        ul {
            list-style-type: none;
            padding-left: 20px;
        }

        li {
            margin: 5px;
            cursor: pointer;
        }

        .expand-collapse {
            margin-right: 5px;
            font-weight: bold;
            cursor: pointer;
        }

        .collapsed > ul {
            display: none;
        }

        input[type="checkbox"] {
            margin-right: 10px;
        }
    </style>
}
<div class="card">
    <div class="card-header">
        <div class="d-flex justify-content-between">
            <div class="card-title align-self-center">
                @Resources.Category.Title
            </div>
            <div>
                <button type="button" class="btn btn-min btn-primary" data-toggle="modal" data-target="#modal-form">
                    <i class="fa fa-plus-circle"></i>
                    @Resources.Globle.Create
                </button>
            </div>
        </div>
    </div>
    <!-- /.card-header -->
    <div class="card-body">
        <div class="row">
            <div class="col-sm-12">
                <div id="treeview"></div>
            </div>
        </div>
    </div>
    <!-- /.card-body -->
</div>
@section Scripts {
    <script src="~/assets/plugins/datatables/jquery.dataTables.js"></script>
    <script src="~/assets/plugins/select2/js/select2.full.min.js"></script>
    <script src="~/assets/plugins/datatables/jquery.dataTables.js"></script>
    <script src="~/assets/plugins/datatables-bs4/js/dataTables.bootstrap4.js"></script>
    <script src="~/assets/plugins/datatables-responsive/js/dataTables.responsive.js"></script>
    <script src="~/assets/plugins/datatables-responsive/js/responsive.bootstrap4.js"></script>
    <script src="~/assets/plugins/sweetalert2/sweetalert2.min.js"></script>
    <script src="~/assets/plugins/sweetalert2/sweetalert2@9-sweetaler2.min.js"></script>
    <script src="~/assets/plugins/toastr/toastr.min.js"></script>

    <script type="text/javascript">
        var modalForm = $('#modal-form');
        var modalTitle = $('#modal-title');
        var btnSaveOrUpdate = $('#btnSaveOrUpdate');
        var PrdCategID = $('#PrdCategID');
        var PrdCategory = $('#PrdCategory');
/*        var prdCategIDMain = $('#PrdCategIDMain');*/
        var CategoryOrder = $('#CategoryOrder');
        $(function () {
            var treeData = [];
                        // Load tree data from the controller
            @*$.getJSON('@Url.Action("GetTreeData", "Category")', function (data) {
                var treeHtml = buildTree(data);
                $('#treeview').html(treeHtml);
            });*@

           // Load tree data from the controller
            $.getJSON('@Url.Action("GetTreeData", "Category")', function (data) {
                treeData = data;
                var treeHtml = buildTree(data);
                $('#treeview').html(treeHtml);
            });

            // Recursive function to generate HTML for tree nodes
            function buildTree(nodes) {
                var html = '<ul>';
                $.each(nodes, function (index, node) {
                    html += '<li class="node' + (node.Children && node.Children.length ? ' collapsed' : '') + '">';

                    // Check if the node has children and show a toggle button (expand/collapse)
                    if (node.Children && node.Children.length > 0) {
                        html += '<span class="expand-collapse">[+]</span>'; // Add toggle symbol
                    }

                    // Add a checkbox for each node
                    html += '<input type="checkbox" class="node-checkbox" data-id="' + node.Id + '" /> ';
                    html += node.Name;

                    // Recursively add children if any
                    if (node.Children && node.Children.length > 0) {
                        html += buildTree(node.Children);
                    }

                    html += '</li>';
                });
                html += '</ul>';
                return html;
            }

            // Toggle the display of child nodes when the user clicks a parent node
            $(document).on('click', '.expand-collapse', function (event) {
                var liNode = $(this).closest('li');
                var subTree = liNode.children('ul');

                // Toggle the visibility of the child tree
                if (subTree.is(':visible')) {
                    subTree.slideUp(); // Slide up to hide
                    $(this).text('[+]'); // Change to expand symbol
                } else {
                    subTree.slideDown(); // Slide down to show
                    $(this).text('[-]'); // Change to collapse symbol
                }

                // Prevent event propagation to avoid triggering parent click event
                event.stopPropagation();
            });

            // Event listener for when a checkbox is clicked
            $(document).on('change', '.node-checkbox', function () {
                var checkbox = $(this);
                var isChecked = checkbox.prop('checked');
                var nodeId = checkbox.data('id');

                // Find all child nodes of the current node
                var children = findChildren(nodeId);
                // Check/uncheck all child nodes
                children.forEach(function (child) {
                    $('input[data-id="' + child.Id + '"]').prop('checked', isChecked);
                });

                // Find the parent node of the current node
                var parentNode = findParent(nodeId);
                if (parentNode) {
                    updateParentCheckbox(parentNode);
                }
            });

            // Function to find all children of a node
            function findChildren(parentId) {
                var children = [];
                function traverse(nodes) {
                    nodes.forEach(function (node) {
                        if (node.ParentId === parentId) {
                            children.push(node);
                            traverse(node.Children);
                        }
                    });
                }
                traverse(treeData); // Use the global treeData array
                return children;
            }

            // Function to find the parent of a node
            function findParent(childId) {
                var parent = null;
                function traverse(nodes) {
                    nodes.forEach(function (node) {
                        if (node.Children) {
                            node.Children.forEach(function (child) {
                                if (child.Id === childId) {
                                    parent = node;
                                }
                            });
                            traverse(node.Children);
                        }
                    });
                }
                traverse(treeData); // Use the global treeData array
                return parent;
            }

            // Function to update the parent checkbox based on the state of its children
            function updateParentCheckbox(parentNode) {
                var parentCheckbox = $('input[data-id="' + parentNode.Id + '"]');
                var allChecked = true;
                var allUnchecked = true;

                // Check the state of all child nodes
                parentNode.Children.forEach(function (child) {
                    var childCheckbox = $('input[data-id="' + child.Id + '"]');
                    if (childCheckbox.prop('checked')) {
                        allUnchecked = false;
                    } else {
                        allChecked = false;
                    }
                });

                // If all child nodes are checked, check the parent
                if (allChecked) {
                    parentCheckbox.prop('checked', true);
                }
                // If any child node is unchecked, uncheck the parent
                else if (allUnchecked) {
                    parentCheckbox.prop('checked', false);
                }
                else {
                    // If some are checked and some are unchecked, set the parent to indeterminate
                    parentCheckbox.prop('checked', false);
                    parentCheckbox.prop('indeterminate', true);
                }

                // Recursively update the parent nodes
                if (parentNode.ParentId > 0) {
                    var parent = findParent(parentNode.ParentId);
                    if (parent) {
                        updateParentCheckbox(parent);
                    }
                }
            }
            //-----------------------------//-------------------------
            const Toast = Swal.mixin({
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
            });

            $('.select2').select2();
            $('.select2bs4').select2({
                theme: 'bootstrap4',
            });
            modalForm.on('hidden.bs.modal', function (e) {
                modalTitle.text('').append('Create');
                btnSaveOrUpdate.text('').append('<i class="far fa-check-circle"></i> Save');
                PrdCategID.val('');
            });
            $('form').submit(function (e) {
                e.preventDefault();
                $.ajax({
                    url: this.action,
                    type: this.method,
                    data: new FormData(this),
                    cache: false,
                    contentType: false,
                    processData: false,
                    success: function (res) {
                        if (res.status == 'True') {
                            modalForm.modal('hide');
                            Toast.fire({
                                type: 'success',
                                title: res.message
                            });
                            _dataTable.draw();
                        }
                        else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: res.message
                            })
                        }
                    },
                    error: function (xhr, error, status) {
                        console.log(error, status);
                    }
                });
            });
            $(document).on('click', '.btnEdit', function () {
                modalTitle.text('').append('Edit');
                btnSaveOrUpdate.text('').append('<i class="far fa-check-circle"></i> Update');
                modalForm.modal('show');
                var data = {};
                data.PrdCategID = $(this).data('id');
                $.ajax({
                    url: '@Url.Action("Edit", "Category")',
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(data),
                    dataType: "json",
                    success: function (res) {
                        PrdCategID.val(res.PrdCategID);
                        PrdCategory.val(res.PrdCategory);
                        CategoryOrder.val(res.CategoryOrder);
                    }
                });
            });
            $(document).on('click', '.btnDelete', function () {
                var data = {};
                data.PrdCategID = $(this).data('id');
                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.value) {
                        $.ajax({
                            url: '@Url.Action("Delete", "Category")',
                            type: "POST",
                            contentType: "application/json; charset=utf-8",
                            data: JSON.stringify(data),
                            dataType: "json",
                            success: function (message) {
                                if (message == 'True') {
                                    _dataTable.draw();
                                    Toast.fire({
                                        type: 'success',
                                        title: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr.'
                                    })
                                }
                                else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Oops...',
                                        text: message
                                    })
                                }
                            },
                            error: function (message) {
                                if (message == 405) {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Oops...',
                                        text: 'You do not have access to do that.'
                                    })
                                }
                            }
                        });
                    }
                }).catch(Swal.noop);
            });

            var _dataTable = $('.data-table')
                .DataTable({
                    "sAjaxSource": "@Url.Action("GetData", "Category")",
                    "bServerSide": true,
                    "pageLength": 25,
                    "bProcessing": true,
                    "bSearchable": true,
                    "order": [[2, 'asc']],
                    "columns": [
                        {
                            "data": null, "sortable": false,
                            "render": function (data, type, row, meta) {
                                return meta.row + meta.settings._iDisplayStart + 1;
                            }
                        },
                        { "data": "PrdCategory", "autoWidth": true, "searchable": true },
                        { "data": "CategoryOrder", "autoWidth": true, "searchable": true },
                        {
                            "data": "PrdCategID",
                            "render": function (data, type, full, meta)
                            {
                               return '<button type="button" data-id="'+data+'" class="btn btnEdit btn-sm btn-primary mx-1" > <i class="fa fa-edit"></i></a >';
                            }
                        }
                    ]
                });
            });
    </script>
}

