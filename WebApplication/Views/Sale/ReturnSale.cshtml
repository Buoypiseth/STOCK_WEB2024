@{
    Layout = "~/Views/Shared/_LayoutFrontend.cshtml";
}
@model WebApplication.Models.Sale
@section Styles {
    <link href="~/assets/plugins/select2/css/select2.min.css" rel="stylesheet">
    <link href="~/assets/plugins/select2-bootstrap4-theme/select2-bootstrap4.min.css" rel="stylesheet">
    <link href="~/assets/plugins/datatables-bs4/css/dataTables.bootstrap4.css" rel="stylesheet" />
    <link href="~/assets/plugins/datatables-responsive/css/responsive.bootstrap4.css" rel="stylesheet">
    <link href="~/assets/plugins/sweetalert2/sweetalert2.min.css" rel="stylesheet" />
    <link href="~/assets/plugins/toastr/toastr.min.css" rel="stylesheet" />
    <link href="~/assets/plugins/daterangepicker/daterangepicker.css" rel="stylesheet">
    <link rel="stylesheet" href="~/assets/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
}
@if (ViewBag.InvoiceID == "0")
{
    @Html.Partial("Partials/_InvoiceStory")
}
else
{
    @Html.Partial("Partials/_SaleReturnHead")
}
@Html.Partial("Partials/_PaymentReturn")
<div class="row pt-2">
    <div class="col-sm-12">
        <table class="table table-sm table-hover data-table dt-responsive nowrap" style="width:100%">
            @if (ViewBag.InvoiceID == "0")
            {
                <thead style="font-size:14px">
                    <tr>
                        <th>@Resources.Globle.No</th>
                        <th>@Resources.Sale.PrdNameEng</th>
                        <th>@Resources.Sale.unitType</th>
                        <th>@Resources.Sale.orderQty</th>
                        <th>@Resources.Sale.orderQtyReturnTemp</th>
                        <th>@Resources.Sale.unitPrice</th>
                        <th>@Resources.Sale.AmtDisc</th>
                        <th>@Resources.Sale.totalAmt</th>
                        <th>@Resources.Sale.Status</th>
                        <th>@Resources.Globle.Option</th>
                    </tr>
                </thead>
                <tbody style="font-size:14px">
                </tbody>
                <tfoot>
                    <tr>
                        <th colspan="7">@Resources.Sale.Total</th>
                        <th colspan="2"></th>
                        <th></th>
                    </tr>
                </tfoot>
            }
            else
            {
                <thead style="font-size:14px">
                    <tr>
                        <th>@Resources.Globle.No</th>
                        <th>@Resources.Sale.PrdNameEng</th>
                        <th>@Resources.Sale.unitType</th>
                        <th>@Resources.Sale.orderQty</th>
                        <th>@Resources.Sale.unitPrice</th>
                        <th>@Resources.Sale.AmtDisc</th>
                        <th>@Resources.Sale.totalAmt</th>
                        <th>@Resources.Globle.Option</th>
                        <th>cid</th>
                    </tr>
                </thead>
                <tbody style="font-size:14px">
                </tbody>
                <tfoot>
                    <tr>
                        <th colspan="6">@Resources.Sale.Total</th>
                        <th colspan="2"></th>
                        <th></th>
                    </tr>
                </tfoot>
            }
        </table>
    </div>
</div>
@section Scripts {
    <script src="~/assets/plugins/datatables/jquery.dataTables.js"></script>
    <script src="~/assets/plugins/datatables-bs4/js/dataTables.bootstrap4.js"></script>
    <script src="~/assets/plugins/datatables-responsive/js/dataTables.responsive.js"></script>
    <script src="~/assets/plugins/datatables-responsive/js/responsive.bootstrap4.js"></script>
    <script src="~/assets/plugins/select2/js/select2.full.min.js"></script>
    <script src="~/assets/plugins/sweetalert2/sweetalert2.min.js"></script>
    <script src="~/assets/plugins/sweetalert2/sweetalert2@9-sweetaler2.min.js"></script>
    <script src="~/assets/plugins/toastr/toastr.min.js"></script>
    <script src="~/assets/plugins/moment/moment.min.js"></script>
    <script src="~/assets/plugins/daterangepicker/daterangepicker.js"></script>

    <script type="text/javascript">
        var modalForm = $('#modal-form');
        var modalKeep = $('#modal-keep');
        var scanCode = $("#ScanCode");
        var btnSubmit = $('button[type="submit"]');

///-----block variable-----/
        //----- get attributes form-----/
        var customerId = $('#memberID');
        var productFilter = $('#ProductFilter');
        var badgeCount = $('#badge-count');

        //-----get attributes form payment-----/
        var customerOrderID = $('#customerOrderID');
        var roomtableID = $('#roomtableID');

        var InvoiceID = $('#InvoiceID');
        var netAmountReturn = $('#netAmountReturn');

        var usdTokhr = $('#usdTokhr');
        var usdToKhrChange = $('#usdToKhrChange');
        var usdToTHB = $('#usdToTHB');

        var totalAmount = $('#totalAmount');
        var totalAmountRiel = $('#totalAmountRiel');

        var amtDisc = $('#AmtDisc');

        var amtDiscRiel = $('#AmtDiscRiel');
        var percentDiscountRiel = $('#percentDiscountRiel');

        var netAmount = $('#netAmount');
        var netAmountRiel = $('#netAmountRiel');

        var amtReceived = $('#amtReceived');
        var amtReceivedRiel = $('#amtReceivedRiel');

        var amtReturn = $('#amtReturn');
        var amtReturnRiel = $('#amtReturnRiel');

        var amtOwed = $('#amtOwed');
        var amtOwedRiel = $('#amtOwedRiel');

        var returnDate = $('#ReturnDate');
        var descripitonTerm = $('#DescripitonTerm');

        var NumPrint = $('#NumPrint');
        var PaperSize = $('#PaperSize');
        var IsType = $('#IsType');

        //-----get attributes form payment return-----/
        var netAmountReturn = $('#netAmountReturn');
        var netAmountReturnRiel = $('#netAmountReturnRiel');
        var _netAmountReturn = 0;
        var _netAmountReturnRiel = 0;
        var _msg = @ViewBag.Msg;
        ///-----declare variable-----/
        var _grandTotal = 0;
        var _amtLoan = 0;
        var _amtPay = 0;
        var _count = 0;

        var _totalAmount = 0;
        var _totalAmountRiel = 0;

        var _amtDisc = 0;
        var _amtDiscRiel = 0;

        var _netAmount = 0;
        var _netAmountRiel = 0;

        var _amtReceived = 0;
        var _amtReceivedRiel = 0;

        var _amtReturn = 0;
        var _amtReturnRiel = 0;

        var _amtOwed = 0;
        var _amtOwedRiel = 0;
///-----end block variable-----/
        $(function () {
            const Toast = Swal.mixin({
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
            });

            $('.select2').select2();
            //Initialize Select2 Elements
            $('.select2bs4').select2({
                theme: 'bootstrap4',
            });

            $('.singledatepicker').daterangepicker({
                opens: 'right',
                drops: 'down',
                singleDatePicker: true,
                showDropdowns: true,
                minYear: 2000,
                maxYear: parseInt(moment().format('YYYY'), 10),
                locale: {
                    format: 'YYYY-MM-DD',
                    firstDay: 1
                }
            });

            $('.singledatetimepicker').daterangepicker({
                opens: 'right',
                drops: 'down',
                singleDatePicker: true,
                showDropdowns: true,
                minYear: 2000,
                maxYear: parseInt(moment().format('YYYY'), 10),
                timePicker: true,
                timePicker24Hour: true,
                locale: {
                    format: 'YYYY-MM-DD hh:mm',
                    firstDay: 1
                }
            });
///-----block do sth-----2
        scanCode.focus();
        if (_msg > 0) {
            dataTableOrder(InvoiceID.val());
        } else {
            dataTable();
        }
        ///-----end-----/
        $('body').on('hidden.bs.modal', modalForm, function () {
            //_dataTable.draw();
            //reloadProduct();
            scanCode.val('').focus();
            amtDisc.val('');
            amtDiscRiel.val('');

            amtReceived.val('');
            amtReceivedRiel.val('');

            amtReturn.val('');
            amtReturnRiel.val('');
            //descripitonTerm.val('');
        });
        $('body').on('show.bs.modal', '#modal-form', function () {
            //getExchangeRate();
            if (_msg > 0) {
                getExchangeRate();
            } else {
                getOldPayment(InvoiceID.val());
            }

        });

        $("#ScanCode").change(function () {
            var barCode = $(this).val();
            scanBarcode(barCode, InvoiceID.val());
        });
        $("body").on('keypress', function (e) {
            if (e.which == 13 && scanCode.val() == '') {
                modalForm.modal('show');
            }
        });
        customerOrderID.on('change', function () {
            var customerOrderID = $("#customerOrderID option:selected").val();
            if (customerOrderID == "") {
                return true;
            }
        });

        $(document).on('click', '#btnCheckOk', function () {
            if (customerOrderID.val() == "") {
                return true;
            }
            $('.data-table').DataTable().destroy();
            dataTable(customerOrderID.val())
        });
//-- action sale after return --
        $("#PrdCategID").change(function () {
            var id = $(this).val();
            var products = "";
            $.ajax({
                type: "POST",
                url: "@Url.Action("GetProductForSale", "Product")",
                dataType: "json",
                data: { id: id },
                success: function (data) {
                    $.each(data, function (index, item) {
                        products += "<option value='" + item.Value + "'>" + item.Text + "</option>"
                    });
                    $("#ProductFilter").html(products)
                }
            });
        });
        $('#formPaymentReturn').submit(function (e) {
            e.preventDefault();
            $.ajax({
                url: this.action,
                type: this.method,
                data: new FormData(this),
                cache: false,
                contentType: false,
                processData: false,
                success: function (res) {
                    if (res.status == 'True') {
                        modalForm.modal('hide');
                        var _id = InvoiceID.val();
                        window.location.href = '@Url.Action("ReturnToOrder", "Sale")?id=' + _id;
                    }
                    else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: res.status
                        })
                    }
                },
                error: function (xhr, error, status) {
                    console.log(error, status);
                }
            });
        });
//-- end action sale after return --
//-- action payment return --
        $(document).on('click', '#btnPaymentReturn', function () {
            var data = {};
            data.InvoiceID = InvoiceID.val();
            data.totalAmount = totalAmount.val();
            data.AmtDisc = amtDisc.val();
            data.netAmount = netAmount.val();
            data.amtReceived = amtReceived.val();
            data.amtReturn = amtReturn.val();
            data.amtOwed = amtOwed.val();
            data.ReturnDate = returnDate.val();
            data.DescripitonTerm = descripitonTerm.val();
            data.netAmountReturn = netAmountReturn.val();
            data.NumPrint = NumPrint.val();
            data.PaperSize = PaperSize.val();
            data.IsType = IsType.val();
			$.ajax({
                url: '@Url.Action("PayReturnToCustomer", "Sale")',
                type: "POST",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify(data),
                dataType: "json",
                success: function (res) {
                    if (res.status == 'True') {
                        modalForm.modal('hide');
                        var src = '@Url.Action("PdfExport", "Sale")?id=' + res.id;
                        let params = 'scrollbars=no,resizable=no,status=no,location=no,toolbar=no,menubar=no,width=' + screen.availWidth + ',height=' + screen.availHeight;
                        window.open(src, "newWin", params);
                        window.location.href = '@Url.Action("Index", "Sale")';
                    }
                    else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: res.status
                        })
                    }
                },
                error: function (xhr, error, status) {
                    console.log(error, status);
                }
            });
        });

        $(document).on('click', '#btnSave', function () {
            modalForm.modal('hide');
            var data = {};
            data.InvoiceID = InvoiceID.val();
            data.customerOrderID = InvoiceID.val();
            data.totalAmount = totalAmount.val();
            data.AmtDisc = amtDisc.val();
            data.netAmount = netAmount.val();
            data.amtReceived = amtReceived.val();
            data.amtReturn = amtReturn.val();
            data.amtOwed = amtOwed.val();
            data.ReturnDate = returnDate.val();
            data.DescripitonTerm = descripitonTerm.val();
            data.netAmountReturn = netAmountReturn.val();
            data.NumPrint = NumPrint.val();
            data.PaperSize = PaperSize.val();
            data.IsType = IsType.val();
			$.ajax({
                url: '@Url.Action("Payment", "Sale")',
                type: "POST",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify(data),
                dataType: "json",
                success: function (res) {
                    if (res.status == 'True') {
                        var src = '@Url.Action("PdfExport", "Sale")?id=' + res.id;
                        let params = 'scrollbars=no,resizable=no,status=no,location=no,toolbar=no,menubar=no,width=' + screen.availWidth + ',height=' + screen.availHeight;
                        window.open(src, "newWin", params);
                        window.location.href = '@Url.Action("Index", "Sale")';
                    }
                    else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: res.status
                        })
                    }
                },
                error: function (xhr, error, status) {
                    console.log(error, status);
                }
            });
        });

        $(document).on('change', '.orderQtyReturnTemp', function () {
            var orderDetailsID = $(this).data('id');
            var orderQtyReturnTemp = $(this).val();
            var val;
            val = orderQtyReturnTemp.substr(0, 1);
            val = val.replace(/[^a-z0-9]/gi, 'No');
            if (isNaN(orderQtyReturnTemp) || orderQtyReturnTemp == '' || val == 'No') {
                $(this).val(0);
                return true;
            }
            orderQtyReturn(orderDetailsID, orderQtyReturnTemp, 'orderQtyReturn');
        });

        amtDisc.change(function () {
            discount('dolar');
            receiveMoney();
        });
        amtDiscRiel.change(function () {
            discount('riel');
            receiveMoney();
        });

        amtReceived.change(function () {
            receiveMoney('dolar');
        });

        amtReceivedRiel.change(function () {
            receiveMoney('riel');
        });



        productFilter.on('change', function () {
            var productId = $("#ProductFilter option:selected").val();
            if (productFilter.val() == "") {
                return true;
            }
            addOrder(productId, InvoiceID.val());
        });

        $(document).on('click', '#btnPlus', function () {
            if (productFilter.val() == "" || productFilter.val() == null) {
                return true;
            }
            addQuantity(1);
        });

        $(document).on('click', '#btnPlusOk', function () {
            if (productFilter.val() == "" || productFilter.val() == null) {
                return true;
            }
            _count = parseFloat(badgeCount.text());
            if (_count == 0) {
                return true;
            }
            addOrder(productFilter.val(), InvoiceID.val(), _count);
        });
        $(document).on('change', '.orderQty', function () {
            var orderDetailsID = $(this).data('id');
            var orderQty = $(this).val();
            if (isNaN(orderQty) || orderQty == '') {
                _dataTable.draw();
                return true;
            }
            updateOrder(orderDetailsID, orderQty, 'orderQty');
        });

        $(document).on('change', '.unitPrice', function () {
            var orderDetailsID = $(this).data('id');
            var unitPrice = $(this).val();
            if (isNaN(unitPrice) || unitPrice == '') {
                _dataTable.draw();
                return true;
            }
            updateOrder(orderDetailsID, unitPrice, 'unitPrice');
        });

        $(document).on('change', '.AmtDisc', function () {
            var orderDetailsID = $(this).data('id');
            var AmtDisc = $(this).val();
            if (isNaN(AmtDisc) || AmtDisc == '') {
                _dataTable.draw();
                return true;
            }
            updateOrder(orderDetailsID, AmtDisc, 'AmtDisc');
        });

        $(document).on('click', '.btnDelete', function () {
            var data = {};
            data.orderDetailsID = $(this).data('id');
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.value) {
                    $.ajax({
                        url: '@Url.Action("Delete", "Sale")',
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify(data),
                        dataType: "json",
                        success: function (message) {
                            if (message == 'True') {
                                _dataTable.draw();
                                Toast.fire({
                                    type: 'success',
                                    title: 'Your product was successfully deleted!'
                                })
                            }
                            else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Oops...',
                                    text: res.message
                                })
                            }
                        },
                        error: function (message) {
                            if (message == 405) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Oops...',
                                    text: 'You do not have access to do that.'
                                })
                            }
                        }
                    });
                }
            }).catch(Swal.noop);
        });
///-----end do sth-----/2
///-----block do fuction-----3
            @*function scanBarcode(barCode, customerId, qty = 1) {
                var data = {};
                data.barCode = barCode;
                data.customerOrderID = customerId;
                data.orderQty = qty;
                $.ajax({
                    url: '@Url.Action("ScanBarcode", "Sale")',
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(data),
                    dataType: "json",
                    processData: false,
                    success: function (message) {
                        if (message == 'True') {
                            dataTableOrder(customerId);
                            _dataTable.draw();
                            scanCode.val('').focus();
                            badgeCount.text('0');
                        }
                        else {
                            scanCode.val('').focus();
                            Swal.fire({
                                icon: 'error',
                                title: 'Barcode',
                                text: message
                            })
                        }
                    },
                    error: function (xhr, error, status) {
                        console.log(error, status);
                    }
                });
            }*@
              function scanBarcode(barCode, customerId, qty = 1, status = false) {
                var data = {};
                data.barCode = barCode;
                data.customerOrderID = customerId;
                data.orderQty = qty;
                data.status = status;
                $.ajax({
                    url: '@Url.Action("ScanBarcode", "Sale")',
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(data),
                    dataType: "json",
                    processData: false,
                    success: function (res) {
                        if (res.status == 'No_Enough') {
                            Swal.fire({
                                title: 'Are you sure?',
                                text: res.message,
                                type: 'warning',
                                showCancelButton: true,
                                confirmButtonColor: '#3085d6',
                                cancelButtonColor: '#d33',
                                confirmButtonText: 'Yes, sale it!'
                            }).then((result) => {
                                if (result.value) {
                                    scanBarcode(barCode, customerId, qty, true)
                                } else {
                                    scanCode.val('').focus();
                                }
                            }).catch(Swal.noop);
                        }
                        else if (res.status == 'True') {
                            //dataTableOrder(customerId);
                            _dataTable.draw();
                            scanCode.val('').focus();
                            badgeCount.text('0');
                        }
                        else {
                            scanCode.val('').focus();
                            Swal.fire({
                                icon: 'error',
                                title: 'Barcode',
                                text: res.message
                            })
                        }
                    },
                    error: function (xhr, error, status) {
                        console.log(error, status);
                    }
                });
            }
            @*function addOrder(productId, customerId, qty = 1) {
                var data = {};
                data.prdID = productId;
                data.customerOrderID = customerId;
                data.orderQty = qty;
                $.ajax({
                    url: '@Url.Action("AddOrder", "Sale")',
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(data),
                    dataType: "json",
                    processData: false,
                    success: function (message) {
                        if (message == 'True') {
                            dataTableOrder(customerId);
                            _dataTable.draw();
                            badgeCount.text('0');
                            scanCode.focus();
                        }
                        else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: message
                            })

                        }
                    },
                    error: function (xhr, error, status) {
                        console.log(error, status);
                    }
                });
            }*@
                function addOrder(productId, customerId, qty = 1, status = false) {
                var data = {};
                    data.prdID = productId;
                    data.customerOrderID = customerId;
                    data.orderQty = qty;
                    data.status = status;
                    $.ajax({
                        url: '@Url.Action("AddOrder", "Sale")',
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify(data),
                        dataType: "json",
                        processData: false,
                        success: function (res) {
                            if (res.status == 'No_Enough') {
                                Swal.fire({
                                    title: 'Are you sure?',
                                    text: res.message,
                                    type: 'warning',
                                    showCancelButton: true,
                                    confirmButtonColor: '#3085d6',
                                    cancelButtonColor: '#d33',
                                    confirmButtonText: 'Yes, sale it!'
                                }).then((result) => {
                                    if (result.value) {
                                        addOrder(productId, customerId, qty, true);
                                    } else {
                                        scanCode.val('').focus();
                                    }
                                }).catch(Swal.noop);
                            }
                            else if (res.status == 'True') {
                                //dataTableOrder(customerId);
                                _dataTable.draw();
                                badgeCount.text('0');
                                scanCode.val('').focus();
                            }
                            else {
                                $('#memberID').val(customerOrderID.val()).trigger('change');
                                badgeCount.text('0');
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Oops...',
                                    text: res.message
                                });
                            }
                        },
                        error: function (xhr, error, status) {
                            console.log(error, status);
                        }
                    });
            }
             function updateOrder(id, val, type, status = false) {
                var data = {};
                data.prdID = id;
                data.Val = val;
                data.Type = type;
                data.status = status;
                $.ajax({
                    url: '@Url.Action("UpdateOrder", "Sale")',
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(data),
                    dataType: "json",
                    processData: false,
                    success: function (res) {
                        if (res.status == 'No_Enough') {
                            Swal.fire({
                                title: 'Are you sure?',
                                text: res.message,
                                type: 'warning',
                                showCancelButton: true,
                                confirmButtonColor: '#3085d6',
                                cancelButtonColor: '#d33',
                                confirmButtonText: 'Yes, sale it!'
                            }).then((result) => {
                                if (result.value) {
                                    updateOrder(id, val, type, true)
                                } else {
                                    scanCode.val('').focus();
                                }
                            }).catch(Swal.noop);
                        }
                        else if (res.status == 'True') {
                            _dataTable.draw();
                            badgeCount.text('0');
                            scanCode.val('').focus();
                        }
                        else {
                            $('#memberID').val(customerOrderID.val()).trigger('change');
                            badgeCount.text('0');
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: res.message
                            });
                        }
                    },
                    error: function (xhr, error, status) {
                        console.log(error, status);
                    }
                });
            }
            function orderQtyReturn(id, val, type) {
                var data = {};
                data.orderDetailsID = id;
                data.Val = val;
                data.Type = type;
                $.ajax({
                    url: '@Url.Action("OrderQtyReturn", "Sale")',
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(data),
                    dataType: "json",
                    processData: false,
                    success: function (res) {
                        if (res.status == 'True') {
                            dataTable(InvoiceID.val());
                            _dataTable.draw();
                        }
                        else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: res.message
                            });
                            dataTableOrder(customerId);
                            _dataTable.draw();
                        }
                    },
                    error: function (xhr, error, status) {
                        console.log(error, status);
                    }
                });
            }
            function addQuantity(val) {
                _count = parseFloat(badgeCount.text());
                _count = _count + val;
                badgeCount.text(_count);
            }
            function getExchangeRate() {
                $.ajax({
                    url: '@Url.Action("GetExchangeRate", "ExchangeRate")',
                    type: "GET",
                    async: true,
                    contentType: "application/json; charset=utf-8",
                    //data: JSON.stringify(data),
                    dataType: "json",
                    success: function (res) {
                        usdTokhr.val(res.usdTokhr);
                        usdToKhrChange.val(res.usdToKhrChange);
                        usdToTHB.val(res.usdToTHB);
                        getNewPayment(InvoiceID.val());
                    },
                    error: function (message) {
                        if (message == 405) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'You do not have access to do that.'
                            })
                        }
                    }
                });
            }
            function getNewPayment(id) {
                 var data = {};
                data.customerOrderID = id;
                $.ajax({
                    url: '@Url.Action("GetPaymentStory", "Sale")',
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(data),
                    dataType: "json",
                    processData: false,
                    success: function (res) {
                        var _sumAmount = $('#sumAmount');
                        _totalAmount = res.totalAmount + res.netAmountReturn;
                        $('#totalAmountTemp').val(_totalAmount );
                        $('#totalAmountRielTemp').val(round(_totalAmount * res.usdTokhr, -2));


                        _netAmountReturn = res.netAmountReturn;
                        netAmountReturn.val(_netAmountReturn);

                        _netAmountReturnRiel = _netAmountReturn * res.usdTokhrChange;
                        netAmountReturnRiel.val(round(_netAmountReturnRiel, -2));

                        _totalAmount = _totalAmount - res.netAmountReturn;
                        _totalAmount = _totalAmount + parseFloat(_sumAmount.val());
                        totalAmount.val(_totalAmount);

                        _totalAmountRiel = round(_totalAmount * res.usdTokhr,-2);
                        totalAmountRiel.val(round(_totalAmountRiel));

                        _amtDisc = res.amtDiscount;
                        amtDisc.val(_amtDisc);

                        _amtDiscRiel = round(_amtDisc * res.usdTokhr, -2);
                        amtDiscRiel.val(_amtDiscRiel);

                        netAmount.val(_totalAmount);
                        netAmountRiel.val(_totalAmountRiel);

                        _amtReceived = res.amtReceived - res.amtReturn;
                        amtReceived.val(_amtReceived);

                        //_amtOwedRiel = round(_amtOwed * res.usdTokhr, -2);
                        //amtOwedRiel.val(_amtOwedRiel);

                        //_amtReturn = res.amtReturn;
                        //amtReturn.val(_amtReturn);

                        //_amtReturnRiel = round(_amtReturn * res.usdTokhrChange, -2);
                        //amtReturnRiel.val(_amtReturnRiel);

                        //_amtReceivedRiel = round(_amtReceived * res.usdTokhr, -2);
                        //amtReceivedRiel.val(_amtReceivedRiel);

                        discount('dolar');
                        receiveMoney('dolar');
                    },
                    error: function (xhr, error, res) {
                        console.log(error, status);
                    }
                });
            }

            function getOldPayment(id) {
                 var data = {};
                data.customerOrderID = id;
                $.ajax({
                    url: '@Url.Action("GetPaymentStory", "Sale")',
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(data),
                    dataType: "json",
                    processData: false,
                    success: function (res) {
                        ///-----Set old Rate-----/
                        usdTokhr.val(res.usdTokhr);
                        usdToKhrChange.val(res.usdTokhrChange);
                        usdToTHB.val(res.usdToTHB);

                        _totalAmount = res.totalAmount;
                        $('#totalAmountTemp').val(_totalAmount);
                        $('#totalAmountRielTemp').val(round(_totalAmount * res.usdTokhr, -2));

                        _netAmountReturnRiel = parseFloat(netAmountReturn.val()) * res.usdTokhrChange;
                        netAmountReturnRiel.val(round(_netAmountReturnRiel, -2));

                        _totalAmount = res.totalAmount - parseFloat(netAmountReturn.val());
                        _totalAmount = _totalAmount;
                        totalAmount.val(_totalAmount);

                        _totalAmountRiel = round(_totalAmount * res.usdTokhr,-2);
                        totalAmountRiel.val(_totalAmountRiel);

                        _amtDisc = res.amtDiscount;
                        amtDisc.val(_amtDisc);

                        _amtDiscRiel = round(_amtDisc * res.usdTokhr, -2);
                        amtDiscRiel.val(_amtDiscRiel);

                        netAmount.val(_totalAmount);
                        netAmountRiel.val(_totalAmountRiel);

                        _amtReceived = res.amtReceived - res.amtReturn;
                        amtReceived.val(round(_amtReceived, 2));

                        //_amtReceivedRiel = round(_amtReceived * res.usdTokhr, -2);
                        //amtReceivedRiel.val(_amtReceivedRiel);
                        discount('dolar');
                        receiveMoney('dolar');
                    },
                    error: function (xhr, error, res) {
                        console.log(error, status);
                    }
                });
            }

            function discount(val) {
                if (val == 'dolar') {
                    _amtDisc = parseFloat(amtDisc.val());
                    _amtDiscRiel = _amtDisc * usdTokhr.val();
                    amtDiscRiel.val(round(_amtDiscRiel,-2));

                    _netAmount = parseFloat(totalAmount.val()) - _amtDisc;
                    netAmount.val(round(_netAmount, 2));

                    _netAmount = _netAmount * usdTokhr.val();
                    netAmountRiel.val(round(_netAmount, -2));

                    return true;
                }

                _amtDiscRiel = parseFloat(amtDiscRiel.val());
                _amtDisc = _amtDiscRiel / usdTokhr.val();
                amtDisc.val(round(_amtDisc, 2));

                _netAmount = parseFloat(totalAmount.val()) - _amtDisc;
                netAmount.val(round(_netAmount, 2));

                _netAmount = _netAmount * usdTokhr.val();
                netAmountRiel.val(round(_netAmount, -2));
            }

            function receiveMoney(val) {
                if (val == 'dolar') {
                    _amtReceivedRiel = parseFloat(amtReceivedRiel.val());
                    _netAmountRiel = parseFloat(netAmountRiel.val());
                    if (_amtReceivedRiel >= _netAmountRiel) {
                        amtReceived.val(0);
                    }
                    returnOrOweMoney();
                    return true;
                }
                _amtReceived = parseFloat(amtReceived.val());
                _netAmount = parseFloat(netAmount.val());
                if (_amtReceived >= _netAmount) {
                    amtReceivedRiel.val(0);
                }
                returnOrOweMoney();
            }

            function returnOrOweMoney() {
                _amtReceivedRiel = amtReceivedRiel.val();
                if (_amtReceivedRiel == '') {
                    _amtReceivedRiel = 0;
                    amtReceivedRiel.val(0);
                }
                _amtReceivedRiel = parseFloat(_amtReceivedRiel) / usdTokhr.val();

                _amtReceived = amtReceived.val();
                if (_amtReceived == '') {
                    _amtReceived = 0;
                    amtReceived.val(0);
                }
                _amtReceived = parseFloat(_amtReceived) + _amtReceivedRiel;

                _netAmount = parseFloat(netAmount.val());
                _amtReturn = _amtReceived - _netAmount;
    //////////set return money-----------------------
                if (_netAmount < 0) {
                    amtReturn.val(round(_amtReturn, 2) + _netAmount);
                    _amtReturnRiel = _amtReturn * usdToKhrChange.val();
                    amtReturnRiel.val(round(_amtReturnRiel, -2));

                    amtOwed.val(0);
                    amtOwedRiel.val(0);
                    return true;
                }
                if (_amtReturn > 0) {
                    amtReturn.val(round(_amtReturn, 2));
                    _amtReturnRiel = _amtReturn * usdToKhrChange.val();
                    amtReturnRiel.val(round(_amtReturnRiel, -2));

                    amtOwed.val(0);
                    amtOwedRiel.val(0);
                    return true;
                }
    /////////set owed money---------------------------
                _amtOwed = _netAmount - _amtReceived;
                _amtOwedRiel = _amtOwed * usdTokhr.val();
                amtOwed.val(round(_amtOwed, 2));
                amtOwedRiel.val(round(_amtOwedRiel, -2));

                amtReturn.val(0);
                amtReturnRiel.val(0);
            }
///-----end do fuction-----/3
///-----block datatable-----4
            var _dataTable;
            function dataTable(id = "0") {
               _dataTable = $('.data-table').DataTable({
                    sAjaxSource: '@Url.Action("GetDataReturn", "Sale")',
                    fnServerParams: function (aoData) {
                        aoData.push({ "name": "customerOrderID", "value": id });
                    },
                    bRetrieve: true,
                    bServerSide: true,
                    pageLength: 100,
                    bProcessing: true,
                    lengthChange: false,
                    searching: false,
                    sAutoWidth: false,
                    bDestroy: true,
                    sDom: 'ft',
                    columns: [
                        {
                            data: null, "sortable": false,
                            render: function (data, type, row, meta) {
                                return meta.row + meta.settings._iDisplayStart + 1;
                            }
                        },
                        { data: "PrdNameEng", autoWidth: true, searchable: true },
                        { data: "unitType", searchable: true },
                        {
                            data: "orderQty",
                            render: function (data, type, full, meta) {
                                //if (full.orderQtyReturn == 0) {
                                //    return data;
                                //}
                                var result = data - full.orderQtyReturn;
                                return result;
                                //return data + ' - ' + full.orderQtyReturn + ' = ' + result;
                            }
                        },
                        {
                            data: "orderQtyReturnTemp",
                            render: function (data, type, full, meta) {
                                return '<input type="text" data-id="' + full.orderDetailsID + '" class="orderQtyReturnTemp textbox-grid" value="' + full.orderQtyReturnTemp + '">';
                            }
                        },
                        { data: "unitPrice", searchable: false, render: $.fn.dataTable.render.number(',', '.', 2, '') },
                        { data: "AmtDisc", searchable: false, render: $.fn.dataTable.render.number(',', '.', 2, '') },
                        { data: "totalAmtReturnTemp", searchable: false, render: $.fn.dataTable.render.number(',', '.', 2, '') },
                        {
                            data: "orderQtyReturnTemp",
                            sortable: false,
                            render: function (data, type, full, meta) {
                                if (full.statusReturn == "Returning") {
                                    return '<span class="text-muted badge badge-pill badge-warning">Returning</span>';
                                }
                                if (full.statusReturn == "Returned") {
                                    return '<span class="text-muted badge badge-pill badge-warning">Returned</span>';
                                }
                                if (full.PytStatus == "Ordering") {
                                    return '<span class="text-muted badge badge-pill badge-warning">Ordering</span>';
                                }
                                return '-';
                            }
                        },
                        { data: "customerOrderID", searchable: false }
                    ],
                    columnDefs: [
                        {
                            "targets": [9],
                            "visible": false,
                            "searchable": false
                        }],
                    footerCallback: function (row, data, start, end, display) {
                        var api = this.api(), data;
                        // Remove the formatting to get integer data for summation
                        var intVal = function (i) {
                            return typeof i === 'string' ?
                                i.replace(/[\$,]/g, '') * 1 :
                                typeof i === 'number' ?
                                    i : 0;
                        };

                        // Total over all pages

                        totalAmt = api
                            .column(7)
                            .data()
                            .reduce(function (a, b) {
                                return intVal(a) + intVal(b);
                            }, 0);

                        invoiceId = api
                            .column(9)
                            .data()
                            .reduce(function (a, b) {
                                return intVal(b);
                            }, 0);

                        $(api.column(7).footer()).html(
                            '$' + totalAmt.toFixed(2),
                            netAmountReturn.val(totalAmt.toFixed(2))
                        );

                        $(api.column(9).footer()).html(
                            invoiceId,
                            InvoiceID.val(invoiceId)
                        );
                    }
               });
            }

            function dataTableOrder(id = "0") {
                _dataTable = $('.data-table')
                .DataTable({
                    sAjaxSource: '@Url.Action("GetDataReturnToOrder", "Sale")',
                    fnServerParams: function (aoData) {
                        aoData.push({ "name": "customerOrderID", "value": id });
                    },
                    bRetrieve: true,
                    bServerSide: true,
                    pageLength: 100,
                    bProcessing: true,
                    lengthChange: false,
                    searching: false,
                    sAutoWidth: false,
                    bDestroy: true,
                    sDom: 'ft',
                    columns: [
                        {
                            data: null, "sortable": false,
                            render: function (data, type, row, meta) {
                                return meta.row + meta.settings._iDisplayStart + 1;
                            }
                        },
                        { data: "PrdNameEng", autoWidth: true, searchable: true },
                        { data: "unitType", searchable: true },
                        {
                            data: "orderQty",
                            render: function (data, type, full, meta) {
                                return '<input type="text" data-id="' + full.prdID + '" class="orderQty textbox-grid" value="' + data + '">';
                            }
                        },
                        {
                            data: "unitPrice",
                            render: function (data, type, full, meta) {
                                return '<input type="text" data-id="' + full.prdID + '" class="unitPrice textbox-grid" value="' + data + '">';
                            }
                        },
                        {
                            data: "AmtDisc",
                            render: function (data, type, full, meta) {
                                return '<input type="text" data-id="' + full.prdID + '" class="AmtDisc textbox-grid" value="' + data + '">';
                            }
                        },
                        { data: "totalAmt", searchable: true, render: $.fn.dataTable.render.number(',', '.', 2, '') },
                        {
                            data: "orderDetailsID",
                            sortable: false,
                            render: function (data, type, full, meta) {
                                //var actions = '<button type="button" data-id="' + data + '" class="btn btnDelete btn-sm btn-danger mx-1"><i class="fa fa-times-circle"></i></button>';
                                    //actions += '<button type="button" data-id="' + data + '" class="btn btnEdit btn-sm btn-primary mx-1" > <i class="fa fa-edit"></i></a >';
                                return '<i data-id="' + data + '" class="fa fa-times-circle text-danger m-1 btnDelete"></i>';
                            }
                        },
                        { data: "customerOrderID", searchable: false }
                    ],
                    columnDefs: [
                        {
                            "targets": [8],
                            "visible": false,
                            "searchable": false
                        }],
                    footerCallback: function (row, data, start, end, display) {
                        var api = this.api(), data;
                        // Remove the formatting to get integer data for summation
                        var intVal = function (i) {
                            return typeof i === 'string' ?
                                i.replace(/[\$,]/g, '') * 1 :
                                typeof i === 'number' ?
                                    i : 0;
                        };

                        // Total over all pages

                        totalAmt = api
                            .column(6)
                            .data()
                            .reduce(function (a, b) {
                                return intVal(a) + intVal(b);
                            }, 0);

                        customerID = api
                            .column(8)
                            .data()
                            .reduce(function (a, b) {
                                return intVal(b);
                            }, 0);

                        $(api.column(6).footer()).html(
                            '$' + totalAmt.toFixed(2),
                            $('#sumAmount').val(totalAmt),
                            //totalAmount.val(totalAmt),
                            //netAmount.val(totalAmt.toFixed(2)),
                            //amtOwed.val(totalAmt.toFixed(2)),
                        );

                        $(api.column(8).footer()).html(
                            customerID,
                            //customerOrderID.val(customerID),
                        );
                    }
                });
            }
///-----end datatable-----/4
    });
    </script>
}



