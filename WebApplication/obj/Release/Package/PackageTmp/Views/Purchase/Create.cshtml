@model WebApplication.Models.PurchaseModel
@section Styles {
    <link href="~/assets/plugins/select2/css/select2.min.css" rel="stylesheet">
    <link href="~/assets/plugins/select2-bootstrap4-theme/select2-bootstrap4.min.css" rel="stylesheet">
    <link href="~/assets/plugins/datatables-bs4/css/dataTables.bootstrap4.css" rel="stylesheet" />
    <link href="~/assets/plugins/datatables-responsive/css/responsive.bootstrap4.css" rel="stylesheet">
    <link href="~/assets/plugins/sweetalert2/sweetalert2.min.css" rel="stylesheet" />
    <link href="~/assets/plugins/toastr/toastr.min.css" rel="stylesheet" />
    <link href="~/assets/plugins/daterangepicker/daterangepicker.css" rel="stylesheet">
}
<div class="card card-default">
    <div class="card-header">
        <h5 class="card-title text-secondary">
            <i class="fa fa-plus-circle"></i>
            @Resources.Buttons.Create
        </h5>
    </div>
    <!-- /.card-header -->
    <div class="card-body">
        @using (Html.BeginForm("AddOrders", "Purchase", FormMethod.Post, new { @id = "formOrder" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="row row-cols-4">
                <div class="col-12 col-sm-6">
                    <div class="form-group">
                        @Html.Label(@Resources.Category.Name, htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownList("ProductFilter", ViewData["ProductList"] as SelectList, "ស្វែងរក...", new { @class = "form-control select2bs4", @style = "width:100%" })
                    </div>
                </div>
                <div class="col-6 col-sm-3">
                    <div class="form-group">
                        @Html.HiddenFor(model => model.ProductID, new { htmlAttributes = new { @class = "form-control" } })

                        @Html.Label(@Resources.Category.Name, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.PrdNameEng, new { htmlAttributes = new { @class = "form-control", @readonly = "True", @placeholder = Resources.Category.Name } })
                        @Html.ValidationMessageFor(model => model.PrdNameEng, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-6 col-sm-3">
                    <div class="form-group">
                        @Html.Label("ចំនួន", htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control", @type = "Number", @required = "required", @placeholder = "0" } })
                        @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-6 col-sm-3">
                    <div class="form-group">
                        @Html.Label("តម្លៃលក់", htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.SellingPriceUSD, new { htmlAttributes = new { @class = "form-control", @step = "0.01", @type = "Number", @placeholder = "0.00" } })
                        @Html.ValidationMessageFor(model => model.SellingPriceUSD, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-6 col-sm-3">
                    <div class="form-group">
                        @Html.Label("តម្លៃដឹកជញ្ជួន", htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.transCost, new { htmlAttributes = new { @class = "form-control", @step = "0.01", @type = "Number", @placeholder = "0.00" } })
                        @Html.ValidationMessageFor(model => model.transCost, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-6 col-sm-3">
                    <div class="form-group">
                        @Html.Label("ថ្ងៃផុតកំណត់", htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.ExpireDate, new { htmlAttributes = new { @class = "form-control singledatepicker" } })
                        @Html.ValidationMessageFor(model => model.ExpireDate, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-6 col-sm-3">
                    <div class="form-group">
                        @Html.Label("តម្លៃទិញ", htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.BuyingCost, new { htmlAttributes = new { @class = "form-control", @step = "0.01", @type = "Number", @placeholder = "0.00" } })
                        @Html.ValidationMessageFor(model => model.BuyingCost, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-12 offset-12 col-sm-6 offset-sm-6">
                    <div class="text-right mt-1">
                        <button type="submit" class="btn btnSave btn-primary btn-min">
                            <i class="fa fa-plus-circle"></i>
                            @*@Resources.Buttons.Save*@
                            Add
                        </button>
                        <a href="#" class="btn btn-min btn-success" data-toggle="modal" data-target="#modal-form">
                            <i class="far fa-check-circle"></i>
                            @*@Resources.Buttons.Create*@
                            Payment
                        </a>
                    </div>
                </div>
            </div>
        }
        @Html.Partial("Partials/_Payment")
        <div class="row">
            <div class="col-sm-12">
                <table class="table table-hover data-table dt-responsive nowrap" style="width:100%">
                    <thead>
                        <tr>
                            <th>ល.រ</th>
                            <th>ផលិតផល</th>
                            <th>លេខកូដ</th>
                            <th>គិតជា</th>
                            <th>តម្លៃទិញចូល</th>
                            <th>ចំនួន</th>
                            <th>តម្លៃសរុប</th>
                            <th>សរុបថ្លៃដឹក</th>
                            <th>ថ្ងៃផុតកំណត់</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                    <tfoot>
                        <tr>
                            <th colspan="5">Total</th>
                            <th></th>
                            <th></th>
                            <th colspan="3"></th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
    <!-- /.card-body -->
</div>
@section Scripts {
    <script src="~/assets/plugins/datatables/jquery.dataTables.js"></script>
    <script src="~/assets/plugins/datatables-bs4/js/dataTables.bootstrap4.js"></script>
    <script src="~/assets/plugins/datatables-responsive/js/dataTables.responsive.js"></script>
    <script src="~/assets/plugins/datatables-responsive/js/responsive.bootstrap4.js"></script>
    <script src="~/assets/plugins/select2/js/select2.full.min.js"></script>
    <script src="~/assets/plugins/sweetalert2/sweetalert2.min.js"></script>
    <script src="~/assets/plugins/sweetalert2/sweetalert2@9-sweetaler2.min.js"></script>
    <script src="~/assets/plugins/toastr/toastr.min.js"></script>
    <script src="~/assets/plugins/moment/moment.min.js"></script>
    <script src="~/assets/plugins/daterangepicker/daterangepicker.js"></script>

    <script type="text/javascript">
        //var ProductID = $('#ProductID');
        //var PrdNameEng = $('#PrdNameEng');
        //var PrdCategID = $('#PrdCategID');
        //var OrderComment = $('#OrderComment');
        //var barCode = $('#barCode');
        //var UnitType = $('#UnitType');
        //var PrdDesc = $('#PrdDesc');
        //var BuyingCost = $('#BuyingCost');
        //var SellingPriceUSD = $('#SellingPriceUSD');
        //var SellingPriceUSDForThisCus = $('#SellingPriceUSDForThisCus');
        //var minimalStock = $('#minimalStock');
        //var TaxNote = $('#TaxNote');
        //var Money_Sale_Type = $('#Money_Sale_Type');
        //var IsUnique = $('#IsUnique');
        //var isCutStock = $('#isCutStock');
        //var Image = $('#Image');

        var modalForm = $('#modal-form');
        var modalTitle = $('#modal-title');
        var btnSave = $('.btnSave');

        var productFilter = $('#ProductFilter');
        var ProductID = $('#ProductID');
        var PrdNameEng = $('#PrdNameEng');
        var UnitType = $('#UnitType');
        var Quantity = $('#Quantity');
        var BuyingCost = $('#BuyingCost');
        ////variabl form payment
        var InvoiceNo = $('#InvoiceNo');
        var Total = $('#Total');
        var PerDis = $('#PerDis');
        var GrandTotal = $('#GrandTotal');
        var AmtLoan = $('#AmtLoan');
        var AmtPay = $('#AmtPay');
        var DateReturn = $('#DateReturn');

        var _grandTotal = 0;
        var _amtLoan = 0;
        var _amtPay = 0;

        ////variable label
        var lbInvoice = $('#lbInvoice');

        $(function () {
            const Toast = Swal.mixin({
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
            });

            $('.select2').select2();
            //Initialize Select2 Elements
            $('.select2bs4').select2({
                theme: 'bootstrap4',
            });

            $('.singledatepicker').daterangepicker({
                opens: 'right',
                drops: 'down',
                singleDatePicker: true,
                showDropdowns: true,
                minYear: 2000,
                maxYear: parseInt(moment().format('YYYY'), 10),
                locale: {
                    format: 'YYYY-MM-DD',
                    firstDay: 1
                }
            });

            $('.singledatetimepicker').daterangepicker({
                opens: 'right',
                drops: 'down',
                singleDatePicker: true,
                showDropdowns: true,
                minYear: 2000,
                maxYear: parseInt(moment().format('YYYY'), 10),
                timePicker: true,
                timePicker24Hour: true,
                locale: {
                    format: 'YYYY-MM-DD hh:mm',
                    firstDay: 1
                }
            });

            modalForm.on('hidden.bs.modal', function (e) {
                InvoiceNo.val('');
                PerDis.val('');
                AmtPay.val('');
                lbInvoice.css("color", "#212529");
                btnSave.prop("disabled", false);
            });

            //modalForm.on('show.bs.modal', function (e) {
            //    alert('ok');
            //    Total.val(10);
            //    //var PerDis = $('#PerDis');
            //    //var GrandTotal = $('#GrandTotal');
            //    //var AmtLoan = $('#AmtLoan');
            //});

            productFilter.on('change', function () {
                var prdID = $("#ProductFilter option:selected").val();
                getOrders(prdID);
            });
            PerDis.change(function () {
                perDis();
            });

            AmtPay.change(function () {
                amtPay();
            });

            $('#formOrder').submit(function (e) {
                e.preventDefault();// stop the standard form submission
                $.ajax({
                    url: this.action,
                    type: this.method,
                    data: new FormData(this),
                    cache: false,
                    contentType: false,
                    processData: false,
                    success: function (message) {
                        if (message == 'True') {
                            _dataTable.draw();
                            Toast.fire({
                                type: 'success',
                                title: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr.'
                            })
                        }
                        else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'Something went wrong! //' + message
                            })
                        }
                    },
                    error: function (xhr, error, status) {
                        console.log(error, status);
                    }
                });
            });

            InvoiceNo.keyup(function () {
                $.getJSON("@Url.Action("ValidateInvoice", "Purchase")", { key: $(this).val() }, function (message) {
                    if (message) {
                        lbInvoice.css("color", "#c82333");
                        btnSave.prop('disabled', true)
                    } else {
                        lbInvoice.css("color", "#212529");
                        btnSave.prop('disabled', false)
                    }
               });
            });

            @*$('#formPayment').submit(function (e) {
                $.ajax({
                    url: '@Url.Action("VerifyInvoice", "Purchase")',
                    type: this.method,
                    data: new FormData(this),
                    cache: 'false',
                    contentType: false,
                    processData: false,
                    success: function (message) {
                        e.preventDefault();

                        //if (message == 'True') {
                        //    _message = message;
                        //    Swal.fire({
                        //        icon: 'error',
                        //        title: 'Oops...',
                        //        text: 'Something went wrong! //'
                        //    })
                        //}
                    },
                    error: function (xhr, error, status) {
                        console.log(error, status);
                    }
                });
            });*@

            @*$(document).on('click', '.btnEdit', function () {
                modalForm.modal('show');
                modalTitle.text('');
                modalTitle.append('<i class="fa fa-edit"></i> Edit');
                btnSaveOrUpdate.text('');
                btnSaveOrUpdate.append('<i class="far fa-check-circle"></i> Update');

                var data = {};
                data.ProductID = $(this).data('id');
                $.ajax({
                    url: '@Url.Action("Edit", "Product")',
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(data),
                    dataType: "json",
                    success: function (res) {
                        ProductID.val(res.ProductID);
                        PrdNameEng.val(res.PrdNameEng);
                        OrderComment.val(res.OrderComment);
                        barCode.val(res.barCode);
                        UnitType.val(res.UnitType);
                        PrdDesc.val(res.PrdDesc);
                        //BuyingCost.val(res.BuyingCost);
                        BuyingCost.prop("disabled", true);
                        SellingPriceUSD.val(res.SellingPriceUSD);
                        SellingPriceUSDForThisCus.val(res.SellingPriceUSDForThisCus);
                        minimalStock.val(res.minimalStock);
                        Image.val(res.Image);

                        if (PrdCategID.find("option[value='" + res.PrdCategID + "']").length) {
                            PrdCategID.val(res.PrdCategID).trigger('change');
                        }

                        if (TaxNote.find("option[value='" + res.TaxNote + "']").length) {
                            TaxNote.val(res.TaxNote).trigger('change');
                        }

                        if (Money_Sale_Type.find("option[value='" + res.Money_Sale_Type + "']").length) {
                            Money_Sale_Type.val(res.Money_Sale_Type).trigger('change');
                        }

                        IsUnique.prop("checked", res.IsUnique);
                        isCutStock.prop("checked", res.isCutStock);
                        //else {
                        //    // Create a DOM Option and pre-select by default
                        //    var newOption = new Option(data.text, data.id, true, true);
                        //    // Append it to the select
                        //    PrdCategID.append(newOption).trigger('change');
                        //}
                    }
                });
            });*@

            $(document).on('click', '.btnDelete', function () {
                var data = {};
                data.ProductID = $(this).data('id');
                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.value) {
                        $.ajax({
                            url: '@Url.Action("Delete", "Purchase")',
                            type: "POST",
                            contentType: "application/json; charset=utf-8",
                            data: JSON.stringify(data),
                            dataType: "json",
                            success: function (message) {
                                if (message == 'True') {
                                    _dataTable.draw();
                                    Toast.fire({
                                        type: 'success',
                                        title: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr.'
                                    })
                                }
                                else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Oops...',
                                        text: 'Something went wrong! //' + message
                                    })
                                }
                            },
                            error: function (message) {
                                if (message == 405) {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Oops...',
                                        text: 'You do not have access to do that.'
                                    })
                                }
                            }
                        });
                    }
                }).catch(Swal.noop);
            });

            var _dataTable = $('.data-table')
                .DataTable({
                    sAjaxSource: '@Url.Action("GetData", "Purchase")',
                    bServerSide: true,
                    pageLength: 25,
                    bProcessing: true,
                    lengthChange: false,
                    searching: false,
                    columns: [
                        {
                            data: null, "sortable": false,
                            render: function (data, type, row, meta) {
                                return meta.row + meta.settings._iDisplayStart + 1;
                            }
                        },
                        { data: "PrdNameEng", autoWidth: true, searchable: true },
                        { data: "OrderComment", searchable: true },
                        { data: "unitType", searchable: true },
                        { data: "BuyingCost", searchable: true, render: $.fn.dataTable.render.number(',', '.', 2, '')},
                        { data: "Quantity", searchable: true },
                        { data: "TotalCost", searchable: true, render: $.fn.dataTable.render.number(',', '.', 2, '') },
                        { data: "transCost", searchable: true, render: $.fn.dataTable.render.number(',', '.', 2, '') },
                        { data: "ExpireDate", searchable: true },
                        {
                            data: "ProductID",
                            render: function (data, type, full, meta) {
                                var actions = '<button type="button" data-id="' + data + '" class="btn btnDelete btn-sm btn-danger mx-1"><i class="fa fa-trash"></i></button>';
                                    actions += '<button type="button" data-id="' + data + '" class="btn btnEdit btn-sm btn-primary mx-1" > <i class="fa fa-edit"></i></a >';
                                return actions;
                            }
                        }
                    ],
                    columnDefs: [
                        {
                            targets: [8],
                            render: function (data, type, row, meta) {
                            /* return moment(data, 'YYYY/MM/DD HH:mm:ss').format('DD/MM/YYYY');*/
                                return moment(data).format('YYYY-MM-DD');
                            }
                        }
                    ],
                    footerCallback: function (row, data, start, end, display) {
                        var api = this.api(), data;
                        // Remove the formatting to get integer data for summation
                        var intVal = function (i) {
                            return typeof i === 'string' ?
                                i.replace(/[\$,]/g, '') * 1 :
                                typeof i === 'number' ?
                                    i : 0;
                        };

                        // Total over all pages
                        totalQuantity = api
                            .column(5)
                            .data()
                            .reduce(function (a, b) {
                                return intVal(a) + intVal(b);
                            }, 0);
                        totalCost = api
                            .column(6)
                            .data()
                            .reduce(function (a, b) {
                                return intVal(a) + intVal(b);
                            }, 0);
                        totalTransCost = api
                            .column(7)
                            .data()
                            .reduce(function (a, b) {
                                return intVal(a) + intVal(b);
                            }, 0);



                        //// Total over this page
                        //pageTotal = api
                        //    .column(6, { page: 'current' })
                        //    .data()
                        //    .reduce(function (a, b) {
                        //        return intVal(a) + intVal(b);
                        //    }, 0);

                        // Update footer
                        $(api.column(5).footer()).html(
                            // '$'+pageTotal +' ( $'+ total +' total)'
                            totalQuantity,
                        );

                        $(api.column(6).footer()).html(
                            // '$'+pageTotal +' ( $'+ total +' total)'
                            '$' + totalCost.toFixed(2),
                            Total.val(totalCost.toFixed(2)),
                            GrandTotal.val(totalCost.toFixed(2)),
                            AmtLoan.val(totalCost.toFixed(2)),
                        );
                        $(api.column(7).footer()).html(
                            // '$'+pageTotal +' ( $'+ total +' total)'
                            '$' + totalTransCost.toFixed(2)
                        );
                    } 
                });

            function getOrders(val) {
                 $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetOrders", "Purchase")',
                    async: true,
                    contentType: "application/json; charset=utf-8",
                     data: { ProductID : val },
                    dataType: "json",
                     success: function (data) {
                         ProductID.val(data.ProductID);
                         PrdNameEng.val(data.PrdNameEng);
                         Quantity.val(data.NumInOne);
                         BuyingCost.val(data.BuyingCost);

                         //console.log(data);
                         //console.log(data['NumInOne']);
                    }
                 });
            }

            function perDis() {
                if (PerDis.val() == "") {
                    PerDis.val(0);
                }

                _grandTotal = (parseFloat(PerDis.val()) / 100) * parseFloat(Total.val());
                _grandTotal = parseFloat(Total.val()) - _grandTotal;

                GrandTotal.val(_grandTotal.toFixed(2));
                AmtLoan.val(_grandTotal.toFixed(2));
                amtPay();
            }

            function amtPay() {
                if (AmtPay.val() == "") {
                    AmtPay.val(0);
                    AmtLoan.val(_grandTotal.toFixed(2));
                }

                _grandTotal = parseFloat(GrandTotal.val());
                _amtPay = parseFloat(AmtPay.val());

                if (_amtPay > _grandTotal) {
                    AmtPay.val(_grandTotal.toFixed(2));
                    _amtPay = parseFloat(AmtPay.val());
                }

                _amtLoan = _grandTotal - _amtPay;
                AmtLoan.val(_amtLoan.toFixed(2));

                if (_amtLoan > 0) {
                    DateReturn.prop("disabled", false);
                } else {
                    DateReturn.prop("disabled", true);
                }
            }
        });
    </script>
}
